# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Columns of an SQL table"""
type Column implements GenericField {
  id: ID!
  name: String!
  component: String!
  canSelect: Boolean
  canInsert: Boolean
  canUpdate: Boolean
  insertRules: [Rule!]
  updateRules: [Rule!]
  deleteRules: [Rule!]
  type: String!
  domain: String
  nullable: Boolean!
  insertDefault: String
  updateDefault: String
}

type ColumnMapping {
  from: Column!
  to: Column!
}

interface GenericField {
  id: ID!
  name: String!
  component: String!
  canSelect: Boolean
  canInsert: Boolean
  canUpdate: Boolean
  insertRules: [Rule!]
  updateRules: [Rule!]
  deleteRules: [Rule!]
}

type Label {
  template: String!
}

type ManyToManyRelationship implements Relationship & GenericField {
  id: ID!
  name: String!
  component: String!
  canSelect: Boolean
  canInsert: Boolean
  canUpdate: Boolean
  insertRules: [Rule!]
  updateRules: [Rule!]
  deleteRules: [Rule!]
  comment: String
  target: Table!
  mapping: [ColumnMapping!]!
  optionsQuery: String
  through: Table!
  throughMapping: [ColumnMapping!]!
  targetPropertyName: String!
  originPropertyName: String!
}

type OneToManyRelationship implements Relationship & GenericField {
  id: ID!
  name: String!
  component: String!
  canSelect: Boolean
  canInsert: Boolean
  canUpdate: Boolean
  insertRules: [Rule!]
  updateRules: [Rule!]
  deleteRules: [Rule!]
  comment: String
  target: Table!
  mapping: [ColumnMapping!]!
  optionsQuery: String
}

type Query {
  """Get the metadata"""
  _metadata(name: String): [Table!]!

  """Get the metadata of one single table, per ID"""
  _metadataTable(name: String!): Table
}

interface Relationship {
  id: ID!
  name: String!
  component: String!
  canSelect: Boolean
  canInsert: Boolean
  canUpdate: Boolean
  insertRules: [Rule!]
  updateRules: [Rule!]
  deleteRules: [Rule!]
  comment: String
  target: Table!
  mapping: [ColumnMapping!]!

  """
  Representation of the GraphQL query of the possible options of the relationship
  """
  optionsQuery: String
}

"""Rule"""
type Rule {
  type: String!
  parameters: [String!]!
  paths: [String!]!
}

type SingleRelationship implements Relationship & GenericField {
  id: ID!
  name: String!
  component: String!
  canSelect: Boolean
  canInsert: Boolean
  canUpdate: Boolean
  insertRules: [Rule!]
  updateRules: [Rule!]
  deleteRules: [Rule!]
  comment: String
  target: Table!
  mapping: [ColumnMapping!]!
  optionsQuery: String
}

"""The table model"""
type Table {
  name: ID!

  """
  Available fields (columns and relationships) that are in use in the table
  """
  fields: [GenericField!]!
  label: Label!
  id: ID!

  """
  Columns that compose the id of the object, either primary key or manually defined in Hasura
  """
  idFields: [Column!]!

  """List of relationships (single or multiple) defined for the table."""
  relationships: [Relationship!]!

  """
  List of object relationships (ManyToOne and OneToOne) defined for the table.
  """
  singleRelationships: [SingleRelationship!]!

  """
  List of array relationships (OneToMany and ManyToMany) defined for the table.
  """
  multipleRelationships: [Relationship!]!

  """List of OneToMany relationships defined for the table."""
  manyToOneRelationships: [OneToManyRelationship!]!

  """List of ManyToMany relationships defined for the table."""
  manyToManyRelationships: [ManyToManyRelationship!]!

  """
  Columns that are pointing to another table. Typically foreign keys, but also
  columns defined in manually configured object relationships
  """
  referenceFields: [Column!]!

  """
  Columns that are not part of the id or pointing to another table. Typically, 'data' columns
  """
  basicFields: [Column!]!

  """Return true if the user is allowed to select elements in the table"""
  canSelect: Boolean!

  """Return true if the user is allowed to insert elements in the table"""
  canInsert: Boolean!

  """Return true if the user is allowed to update elements in the table"""
  canUpdate: Boolean!

  """Return true if the user is allowed to delete elements in the table"""
  canDelete: Boolean!

  """
  Returns an array of the rules to comply to insert an item. Returns null if no insert is not allowed.
  """
  insertRules: [Rule!]

  """
  Returns an array of the rules to comply to update an item. Returns null if no update is not allowed.
  """
  updateRules: [Rule!]

  """
  Returns an array of the rules to comply to delete an item. Returns null if deletion is not allowed.
  """
  deleteRules: [Rule!]

  """Representation of the GraphQL query of the table"""
  query: [String!]!

  """GraphQL query to list the elements of the table"""
  listQuery: String

  """GraphQL query to get one single element"""
  elementQuery: String
}
