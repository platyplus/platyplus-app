version: '3.1'
services:
  reverse-proxy:
    ports:
      - '8080:8080' # The Web UI (enabled by --api) # TODO: map with traefik
  authentication:
    build:
      context: .
      args:
        - NODE_ENV=development
    command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229 ./bin/www
    ports:
      - '9229:9229' # TODO: map with traefik
      - '9230:9230' # TODO: map with traefik
    volumes:
      - .:/opt/app:delegated
      # bind-mounting these two files in will let you add packages during development without rebuilding
      # for example, to add bower to your app while developing, just install it inside the container
      # and then nodemon will restart. Your changes will last until you "docker-compose down" and will
      # be saved on host for next build
      # docker-compose exec node npm install --save bower
      - ./package.json:/opt/package.json
      - ./package-lock.json:/opt/package-lock.json
      # this is a workaround to prevent host node_modules from accidently getting mounted in container
      # in case you want to use node/npm both outside container for test/lint etc. and also inside container
      # this will overwrite the default node_modules dir in container so it won't conflict with our
      # /opt/node_modules location. Thanks to PR from @brnluiz
      - notused:/opt/app/node_modules
    environment:
      NODE_ENV: development
      HASURA_GRAPHQL_ACCESS_KEY: '${HASURA_ACCESS_KEY}'
      PUBLIC_KEY: '${PUBLIC_KEY}'
      PRIVATE_KEY: '${PRIVATE_KEY}'
    healthcheck:
      disable: true
  postgres:
    ports:
      - '55432:5432'
volumes:
  notused:
# TODO: add custom docker build for the frontend and for the auth service
# TODO: build, with context and dockerfile
# TODO: create volumes linked to the source code
# TODO: frontend: quasar dev
# TODO: auth service: nodemon
# TODO: check how node_modules are monitored (crashes happened in the past in quasar dev)
# TODO: console log
# TODO: nodemon debugging
# TODO: singe Dockerfile with prod and dev stages?
