version: '3.1'
services:
  app:
    image: platyplus/platyplus
    depends_on:
      - 'graphql-engine'
    environment:
      API: 'graphql.${DOMAIN}/v1alpha1/graphql'
    labels:
      - 'traefik.frontend.rule=Host:app.${DOMAIN}'
      - 'traefik.port=80' # TODO: revoir le dockerfile pour pouvoir utiliser le port 3000 par d√©faut
  authentication:
    image: platyplus/authentication
    depends_on:
      - 'postgres' # TODO: https://github.com/jwilder/dockerize -wait
    environment:
      ALGORITHM: 'RS256' #TODO: default value
      HASURA_URL: 'http://graphql-engine:3000/v1alpha1/graphql'
  graphql-engine:
    image: platyplus/graphql-engine
    depends_on:
      - 'authentication'
      - 'postgres'
    environment:
      HASURA_GRAPHQL_SERVER_PORT: 3000
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:@postgres:5432/postgres
      AUTH_ALGORITHM: RS256
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anonymous'
      HASURA_GRAPHQL_MIGRATIONS_DIR: migrations
      HASURA_GRAPHQL_ENABLE_CONSOLE: 'false'
    labels:
      - 'traefik.frontend.rule=Host:graphql.${DOMAIN}'
      - 'traefik.port=3000'
  postgres:
    image: mdillon/postgis:11-alpine
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 30s
      timeout: 5s
    volumes:
      - db_data:/var/lib/postgresql/data
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command:
      - '--api'
      - '--docker'
      - '--web'
    healthcheck:
      test: ['CMD', '/traefik', 'healthcheck', '--ping']
      interval: 30s
      timeout: 5s
    ports:
      - '80:80' # The HTTP port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  synchronization-hook:
    image: platyplus/synchronization-hook
    depends_on:
      - 'graphql-engine' # TODO: https://github.com/jwilder/dockerize -wait
    environment:
      HASURA_URL: 'http://graphql-engine:3000/v1alpha1/graphql'
volumes:
  db_data:
