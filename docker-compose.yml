version: '3.1'
services:
  reverse-proxy:
    image: traefik # The official Traefik docker image
    command:
      - '--api'
      - '--docker'
    ports:
      - '80:80' # The HTTP port
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
  postgres:
    image: mdillon/postgis:11-alpine
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - db_data:/var/lib/postgresql/data
  authentication:
    image: platyplus/authentication
    depends_on:
      - 'postgres' # TODO: https://github.com/jwilder/dockerize -wait
    environment:
      ALGORITHM: 'RS256'
      HASURA_URL: 'http://graphql-engine:8080/v1alpha1/graphql'
  graphql-engine:
    image: hasura/graphql-engine:v1.0.0-alpha37
    labels:
      - 'traefik.frontend.rule=Host:graphql.${DOMAIN}'
      - 'traefik.port=8080'
    depends_on:
      - 'postgres' # TODO: https://github.com/jwilder/dockerize -wait
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:@postgres:5432/postgres
      HASURA_GRAPHQL_ENABLE_CONSOLE: '${HASURA_ENABLE_CONSOLE:-true}'
      HASURA_GRAPHQL_JWT_SECRET: '{"type":"RS256", "key":"$AUTH_PUBLIC_KEY"}'
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anonymous'
  app:
    image: platyplus/platyplus
    labels:
      - 'traefik.frontend.rule=Host:app.${DOMAIN}'
      - 'traefik.port=80'
    depends_on:
      - 'authentication'
      - 'graphql-engine'
    environment:
      API: 'graphql.${DOMAIN}/v1alpha1/graphql'
volumes:
  db_data:
