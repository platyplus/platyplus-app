---
# kind: pipeline
# name: documentation
# steps:
#   - name: build-docs
#     image: node:alpine
#     commands:
#       - apk add --no-cache git
#       - git config --global user.email "no-reply@platy.plus"
#       - git config --global user.name "Drone.io CI"
#       - ./scripts/deploy-documentation.sh
#     environment:
#       GH_TOKEN:
#         from_secret: GH_TOKEN
#       GH_USER:
#         from_secret: GH_USER
#     when:
#       branch: master
kind: pipeline
type: docker
name: publish
trigger:
  branch:
    - master
steps:
  - name: build-packages
    image: node:alpine
    commands:
      - apk add --no-cache git
      - git config --global user.email "no-reply@platy.plus"
      - git config --global user.name "Drone.io CI"
      - yarn install
      - yarn run build
  - name: publish-npm
    when:
      event: tag
    image: node:alpine
    commands:
      - echo "bingo"
  - name: publish-docker-platyplus
    depends_on: [build-packages]
    image: plugins/gcr
    settings:
      dockerfile: backend/platyplus-service/Dockerfile
      repo: platyplus-0402/platyplus-service
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - ${DRONE_BRANCH}
      json_key:
        from_secret: google_credentials
  - name: publish-docker-graphql-engine
    depends_on: [build-packages]
    image: plugins/gcr
    settings:
      dockerfile: backend/graphql-engine/Dockerfile
      repo: platyplus-0402/graphql-engine
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - ${DRONE_BRANCH}
      json_key:
        from_secret: google_credentials
  - name: publish-docker-authentication
    depends_on: [build-packages]
    image: plugins/gcr
    settings:
      dockerfile: backend/authentication-service/Dockerfile
      repo: platyplus-0402/authentication-service
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - ${DRONE_BRANCH}
      json_key:
        from_secret: google_credentials
  - name: publish-docker-functions
    depends_on: [build-packages]
    image: plugins/gcr
    settings:
      dockerfile: backend/functions-service/Dockerfile
      repo: platyplus-0402/functions-service
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - ${DRONE_BRANCH}
      json_key:
        from_secret: google_credentials
  - name: publish-docker-metadata
    depends_on: [build-packages]
    image: plugins/gcr
    settings:
      dockerfile: backend/metadata-service/Dockerfile
      repo: platyplus-0402/metadata-service
      tags:
        - ${DRONE_COMMIT_SHA:0:8}
        - ${DRONE_BRANCH}
      json_key:
        from_secret: google_credentials
---
kind: pipeline
type: docker
name: deploy
trigger:
  branch:
    - master
depends_on: [publish]
steps:
  - name: deploy-authentication
    image: platyplus/drone-gcloud:latest
    environment:
      PUBLIC_KEY:
        from_secret: PUBLIC_KEY
      PRIVATE_KEY:
        from_secret: PRIVATE_KEY
      HASURA_GRAPHQL_ADMIN_SECRET:
        from_secret: HASURA_GRAPHQL_ADMIN_SECRET
    settings:
      credentials:
        from_secret: google_credentials
      config:
        compute/region: europe-west1
        compute/zone: europe-west1-b
        run/platform: managed
        run/region: europe-west1
      commands:
        - command: beta run deploy authentication
          flags:
            - image: gcr.io/platyplus-0402/authentication-service:$${DRONE_COMMIT_SHA:0:8}
            - allow-unauthenticated
            - timeout: 900
            - set-env-vars:
                PUBLIC_KEY: '"$$PUBLIC_KEY"'
                PRIVATE_KEY: '"$$PRIVATE_KEY"'
                HASURA_GRAPHQL_ADMIN_SECRET: '"$$HASURA_GRAPHQL_ADMIN_SECRET"'
  - name: deploy-functions
    image: platyplus/drone-gcloud:latest
    depends_on: [deploy-authentication]
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET:
        from_secret: HASURA_GRAPHQL_ADMIN_SECRET
    settings:
      credentials:
        from_secret: google_credentials
      config:
        compute/region: europe-west1
        compute/zone: europe-west1-b
        run/platform: managed
        run/region: europe-west1
      commands:
        - command: beta run services describe authentication --format "get(status.url)"
          export: AUTHENTICATION_URL
        # ! Set when the functions microservice is ready to work
        # - command: beta run deploy functions
        #   flags:
        #     - image: gcr.io/platyplus-0402/metadata-service:$${DRONE_COMMIT_SHA:0:8}
        #     - allow-unauthenticated
        #     - timeout: 900
        #     - set-env-vars:
        #         HASURA_GRAPHQL_ADMIN_SECRET: '"$$HASURA_GRAPHQL_ADMIN_SECRET"'
        #         AUTHENTICATION_URL: '"$$AUTHENTICATION_URL"'
  - name: deploy-metadata
    image: platyplus/drone-gcloud:latest
    depends_on: [deploy-authentication]
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET:
        from_secret: HASURA_GRAPHQL_ADMIN_SECRET
    settings:
      credentials:
        from_secret: google_credentials
      config:
        compute/region: europe-west1
        compute/zone: europe-west1-b
        run/platform: managed
        run/region: europe-west1
      commands:
        - command: beta run services describe authentication --format "get(status.url)"
          export: AUTHENTICATION_URL
        - command: beta run deploy metadata
          flags:
            - image: gcr.io/platyplus-0402/metadata-service:$${DRONE_COMMIT_SHA:0:8}
            - allow-unauthenticated
            - timeout: 900
            - set-env-vars:
                HASURA_GRAPHQL_ADMIN_SECRET: '"$$HASURA_GRAPHQL_ADMIN_SECRET"'
                AUTHENTICATION_URL: '"$$AUTHENTICATION_URL"'
  - name: deploy-graphql-engine
    image: platyplus/drone-gcloud:latest
    depends_on: [deploy-authentication, deploy-functions, deploy-metadata]
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET:
        from_secret: HASURA_GRAPHQL_ADMIN_SECRET
      POSTGRES_PASSWORD:
        from_secret: POSTGRES_PASSWORD
      # ! Remove this when functions work
      FUNCTIONS_URL: http://functions:3000
    settings:
      credentials:
        from_secret: google_credentials
      config:
        compute/region: europe-west1
        compute/zone: europe-west1-b
        run/platform: managed
        run/region: europe-west1
      commands:
        - command: sql databases create hasura-${DRONE_BRANCH} --instance platyplus-main
          skipError: true
        # gcloud sql users set-password postgres --instance platyplus --password $$POSTGRES_PASSWORD # ? Useless?
        - command: sql instances describe platyplus-main --format "get(connectionName)"
          export: CLOUDSQL_INSTANCE
        - command: beta run services describe authentication --format "get(status.url)"
          export: AUTHENTICATION_URL
        # ! Set this when functions works
        # - command: beta run services describe functions --format "get(status.url)"
        #   export: FUNCTIONS_URL
        - command: beta run services describe metadata --format "get(status.url)"
          export: METADATA_URL
        - command: beta run deploy graphql-engine
          flags:
            - image: gcr.io/platyplus-0402/graphql-engine:$${DRONE_COMMIT_SHA:0:8}
            - allow-unauthenticated
            - timeout: 900
            - set-cloudsql-instances: $${CLOUDSQL_INSTANCE}
            - set-env-vars:
                HASURA_GRAPHQL_DATABASE_URL: '"postgres://postgres:$${POSTGRES_PASSWORD}@/hasura-${DRONE_BRANCH}?host=/cloudsql/$${CLOUDSQL_INSTANCE}"'
                AUTHENTICATION_URL: '"$$AUTHENTICATION_URL"'
                FUNCTIONS_URL: '"$$FUNCTIONS_URL"'
                METADATA_URL: '"$$METADATA_URL"'
                HASURA_GRAPHQL_ADMIN_SECRET: '"$$HASURA_GRAPHQL_ADMIN_SECRET"'
                # ENABLE_CLOUDSQL_PROXY: '"true"'
        # * The following services need to have the graphql-engine to send him requests, but graphql-engine needed them first
        - command: beta run services describe graphql-engine --format="get(status.url)"
          export: GRAPHQL_ENGINE_URL
        - beta run services update authentication --update-env-vars GRAPHQL_ENGINE_URL="$$GRAPHQL_ENGINE_URL"
        # ! Set the following line when the functions microservice is ready to work
        # - beta run services update functions --update-env-vars GRAPHQL_ENGINE_URL="$$GRAPHQL_ENGINE_URL"
        # ! Set the following line when the metadata microservice is ready to work
        - beta run services update metadata --update-env-vars GRAPHQL_ENGINE_URL="$$GRAPHQL_ENGINE_URL"
  - name: deploy-platyplus
    image: platyplus/drone-gcloud:latest
    depends_on: [deploy-graphql-engine]
    settings:
      credentials:
        from_secret: google_credentials
      config:
        compute/region: europe-west1
        compute/zone: europe-west1-b
        run/platform: managed
        run/region: europe-west1
      commands:
        - command: beta run services describe graphql-engine --format="get(status.url)"
          export: GRAPHQL_ENGINE_PUBLIC_URL
        - command: beta run deploy platyplus
          flags:
            - image: gcr.io/platyplus-0402/platyplus-service:$${DRONE_COMMIT_SHA:0:8}
            - allow-unauthenticated
            - timeout: 900
            - update-env-vars: GRAPHQL_ENGINE_PUBLIC_URL="$$GRAPHQL_ENGINE_PUBLIC_URL"
---
kind: signature
hmac: d9887fbf0d90e9d111f8680076a834749a9a94861a641abe853e9e686265b321
