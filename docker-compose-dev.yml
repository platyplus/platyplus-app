version: '3.4'
services:
  platyplus:
    build:
      context: .
      # TODO use the custom Dockerfile
      args:
        NODE_ENV: development
    command: yarn run watch
    healthcheck:
      disable: true
    restart: always
    volumes:
      - ./frontend/platyplus:/app/frontend/platyplus
      - /app/frontend/platyplus/node_modules
      - /app/frontend/platyplus/.quasar
      - /app/frontend/platyplus/dist
      - ./packages/errors:/app/packages/errors
      - /app/packages/errors/node_modules
      - /app/packages/errors/lib
      - ./packages/hasura-apollo-client:/app/packages/hasura-apollo-client
      - /app/packages/hasura-apollo-client/node_modules
      - /app/packages/hasura-apollo-client/lib
      - ./packages/vuex-apollo-offline:/app/packages/vuex-apollo-offline
      - /app/packages/vuex-apollo-offline/node_modules
      - /app/packages/vuex-apollo-offline/lib
    labels:
      - 'traefik.http.services.platyplus.loadbalancer.server.port=8080'
  authentication:
    build:
      context: .
      # TODO use the custom Dockerfile
      args:
        NODE_ENV: development
    command: lerna run --scope @platyplus/authentication-service dev
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: '${HASURA_GRAPHQL_ADMIN_SECRET}'
      PRIVATE_KEY: '${PRIVATE_KEY}'
      PUBLIC_KEY: '${PUBLIC_KEY}'
      EXPIRES_IN: 2h # *
    healthcheck:
      disable: true
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.authentication.rule=Host(`authentication.${DOMAIN:-localhost}`)'
      - 'traefik.http.routers.authentication.entrypoints=web'
      - 'traefik.http.services.authentication.loadbalancer.server.port=3000'
    ports:
      - '9229:9229'
    restart: always
    volumes: # TODO include ALL subdirectories but exclude node_modules etc
      - ./backend/authentication-service/src:/app/backend/authentication-service/src
      - ./packages/microservice/src:/app/packages/microservice/src
      - ./packages/errors/src:/app/packages/errors/src
      - ./packages/hasura-node-client/src:/app/packages/hasura-node-client/src
  # configuration: # TODO: review
  #   image: k8s.gcr.io/git-sync:v3.1.2
  #   environment: # See https://github.com/kubernetes/git-sync/blob/master/cmd/git-sync/main.go
  #     GIT_SYNC_REPO: https://github.com/platyplus/configuration
  #     GIT_SYNC_ROOT: /git
  #   user: root
  #   healthcheck:
  #     disable: true
  #   restart: always
  #   volumes:
  #     - configuration:/git
  graphql-engine:
    build:
      context: .
      dockerfile: ./backend/graphql-engine/Dockerfile
    environment:
      HASURA_GRAPHQL_ADMIN_SECRET: '${HASURA_GRAPHQL_ADMIN_SECRET}'
      POSTGRES_HOST: 'postgres'
      ENABLE_CLOUDSQL_PROXY: 'false'
    command: ['graphql-engine', 'serve'] # TODO remove? duplicate from Dockerfile / entrypoint?
    healthcheck:
      disable: true
    restart: always
    volumes:
      - ./backend/graphql-engine/migrations:/hasura-migrations
  # functions:
  #   build:
  #     context: .
  #     args:
  #       NODE_ENV: development
  #   command: lerna run --scope @platyplus/functions-service dev
  #   environment:
  #     HASURA_GRAPHQL_ADMIN_SECRET: '${HASURA_GRAPHQL_ADMIN_SECRET}'
  #     AUTHENTICATION_URL: http://authentication:3000
  #   healthcheck:
  #     disable: true
  #   labels:
  #     - 'traefik.enable=true'
  #     - 'traefik.http.routers.functions.rule=Host(`functions.${DOMAIN:-localhost}`)'
  #     - 'traefik.http.routers.functions.entrypoints=web'
  #     - 'traefik.http.services.functions.loadbalancer.server.port=3000'
  #   ports:
  #     - '9230:9229'
  #   restart: always
  #   volumes:
  #     - ./backend/functions-service/src:/app/backend/functions-service/src
  #     - ./packages/microservice/src:/app/packages/microservice/src
  #     - ./packages/hasura-node-client/src:/app/packages/hasura-node-client/src
  metadata:
    build:
      context: .
      # TODO use the custom Dockerfile
      args:
        NODE_ENV: development
    command: lerna run --scope @platyplus/metadata-service dev
    healthcheck:
      disable: true
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.metadata.rule=Host(`metadata.${DOMAIN:-localhost}`)'
      - 'traefik.http.routers.metadata.entrypoints=web'
      - 'traefik.http.services.metadata.loadbalancer.server.port=3000'
    ports:
      - '9231:9229'
    restart: always
    volumes:
      - ./backend/metadata-service/src:/app/backend/metadata-service/src
      - ./packages/microservice/src:/app/packages/microservice/src
  postgres:
    ports:
      - '5432:5432'
    restart: always
  reverse-proxy:
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)'
      - 'traefik.http.routers.traefik.entrypoints=web'
      - 'traefik.http.services.traefik.loadbalancer.server.port=8080'
    restart: always
volumes:
  configuration:
